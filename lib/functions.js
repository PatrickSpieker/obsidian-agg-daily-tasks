// Pure functions extracted for testing (without Obsidian dependencies)
// Constants
export const DEDUPLICATE = true;
export const SORT = false;
export const REVERSE_CHRONO = true;
export const OVERRIDE_WITH_NEWER_CHECKED = true;
export const GROUP_BY_DATE = true;
const CHECKED_TASK_REGEX = /^[\t >-]*[-*+]\s+\[[xX]\]\s.+$/;
const UNCHECKED_TASK_REGEX = /^[\t >-]*[-*+]\s+\[ \]\s.+$/;
// Pure functions for data manipulation
export const normalizeTaskText = (line) => {
    const m = line.match(/^[\t >-]*[-*+]\s+\[[ xX]\]\s+(.*)$/);
    return m ? m[1].trim() : null;
};
export const extractCheckedTasks = (fileContents) => {
    const filesNewestToOldest = [...fileContents].sort((a, b) => b.fileName.localeCompare(a.fileName));
    const newerChecked = new Set();
    for (const { lines } of filesNewestToOldest) {
        for (const line of lines) {
            if (CHECKED_TASK_REGEX.test(line)) {
                const txt = normalizeTaskText(line);
                if (txt)
                    newerChecked.add(txt);
            }
        }
    }
    return newerChecked;
};
export const processTasksWithOverrides = (fileContents, newerChecked, reverseChronological = true) => {
    const tasksByDate = {};
    let allTasks = [];
    const sortedFiles = reverseChronological
        ? [...fileContents].sort((a, b) => b.fileName.localeCompare(a.fileName))
        : [...fileContents].sort((a, b) => a.fileName.localeCompare(b.fileName));
    for (const { fileName, lines } of sortedFiles) {
        const included = [];
        for (const line of lines) {
            if (UNCHECKED_TASK_REGEX.test(line)) {
                const txt = normalizeTaskText(line);
                if (txt &&
                    OVERRIDE_WITH_NEWER_CHECKED &&
                    newerChecked.has(txt) &&
                    // Ensure the *current* file isn't the one providing the checked instance
                    !lines.some((l) => CHECKED_TASK_REGEX.test(l) && normalizeTaskText(l) === txt)) {
                    continue; // suppressed by newer checked task
                }
                included.push(line);
                allTasks.push(line);
            }
        }
        if (included.length) {
            tasksByDate[fileName] = included;
        }
    }
    return { tasksByDate, allTasks };
};
export const createTaskOwnershipMap = (tasksByDate) => {
    const taskOwnership = new Map();
    if (!DEDUPLICATE || !GROUP_BY_DATE) {
        return taskOwnership;
    }
    // Process dates from newest to oldest to find most recent occurrence of each task
    const dates = Object.keys(tasksByDate).sort((a, b) => b.localeCompare(a)); // newest first
    for (const date of dates) {
        for (const task of tasksByDate[date]) {
            const normalizedTask = normalizeTaskText(task);
            if (normalizedTask && !taskOwnership.has(normalizedTask)) {
                // First time seeing this task (processing newest to oldest), so this date owns it
                taskOwnership.set(normalizedTask, date);
            }
        }
    }
    return taskOwnership;
};
export const buildFinalTasksByDate = (tasksByDate, taskOwnership, shouldSort = false) => {
    const finalTasksByDate = {};
    let allFinalTasks = [];
    if (GROUP_BY_DATE) {
        for (const date of Object.keys(tasksByDate)) {
            const dateTasks = tasksByDate[date].filter((task) => {
                if (!DEDUPLICATE)
                    return true;
                const normalizedTask = normalizeTaskText(task);
                if (!normalizedTask)
                    return true;
                // Only include task if this date owns it
                return taskOwnership.get(normalizedTask) === date;
            });
            if (dateTasks.length) {
                finalTasksByDate[date] = shouldSort
                    ? dateTasks.slice().sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }))
                    : dateTasks;
                allFinalTasks.push(...finalTasksByDate[date]);
            }
        }
    }
    return { finalTasksByDate, allFinalTasks };
};
export const buildNonGroupedTasks = (allTasks, shouldSort = false) => {
    let finalTasks = allTasks;
    if (DEDUPLICATE) {
        const seen = new Set();
        finalTasks = [];
        for (const t of allTasks) {
            const key = t.trim();
            if (!seen.has(key)) {
                seen.add(key);
                finalTasks.push(t);
            }
        }
    }
    if (shouldSort) {
        finalTasks = finalTasks
            .slice()
            .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }));
    }
    return finalTasks;
};
export const generateOutput = (finalTasksByDate, allFinalTasks, reverseChronological = true) => {
    let output = "### Unchecked Tasks\n\n";
    if (GROUP_BY_DATE) {
        // Insert grouped by date (sorted chronologically)
        const dates = Object.keys(finalTasksByDate).sort((a, b) => a.localeCompare(b));
        if (reverseChronological) {
            dates.reverse();
        }
        for (const date of dates) {
            if (finalTasksByDate[date].length) {
                output += `#### ${date}\n`;
                output += finalTasksByDate[date].join("\n") + "\n\n";
            }
        }
    }
    else {
        output += allFinalTasks.join("\n") + "\n";
    }
    return output;
};
//# sourceMappingURL=data:application/json;base64,