import { describe, it, expect } from 'vitest';
import { normalizeTaskText, extractCheckedTasks, processTasksWithOverrides, createTaskOwnershipMap, buildFinalTasksByDate, buildNonGroupedTasks, generateOutput } from './functions';
describe('Task Processing Functions', () => {
    describe('normalizeTaskText', () => {
        it('should extract task text from unchecked task', () => {
            const result = normalizeTaskText('- [ ] Buy milk');
            expect(result).toBe('Buy milk');
        });
        it('should extract task text from checked task', () => {
            const result = normalizeTaskText('- [x] Buy eggs');
            expect(result).toBe('Buy eggs');
        });
        it('should handle indented tasks', () => {
            const result = normalizeTaskText('  - [ ] Indented task');
            expect(result).toBe('Indented task');
        });
        it('should handle tasks with different bullet types', () => {
            expect(normalizeTaskText('+ [ ] Plus bullet')).toBe('Plus bullet');
            expect(normalizeTaskText('* [X] Star bullet')).toBe('Star bullet');
        });
        it('should return null for non-task text', () => {
            const result = normalizeTaskText('Just regular text');
            expect(result).toBeNull();
        });
    });
    describe('extractCheckedTasks', () => {
        it('should find checked tasks from multiple files', () => {
            const fileContents = [
                {
                    fileName: '2023-01-01',
                    lines: ['- [ ] Task A', '- [x] Task B', '- [ ] Task C']
                },
                {
                    fileName: '2023-01-02',
                    lines: ['- [ ] Task A', '- [x] Task C', '- [ ] Task D']
                }
            ];
            const checkedTasks = extractCheckedTasks(fileContents);
            expect(checkedTasks.has('Task B')).toBe(true);
            expect(checkedTasks.has('Task C')).toBe(true);
            expect(checkedTasks.has('Task A')).toBe(false);
            expect(checkedTasks.has('Task D')).toBe(false);
        });
        it('should handle empty file contents', () => {
            const checkedTasks = extractCheckedTasks([]);
            expect(checkedTasks.size).toBe(0);
        });
    });
    describe('processTasksWithOverrides', () => {
        it('should process tasks and group by date', () => {
            const fileContents = [
                {
                    fileName: '2023-01-01',
                    lines: ['- [ ] Task A', '- [ ] Task B', '- [ ] Task C']
                },
                {
                    fileName: '2023-01-02',
                    lines: ['- [ ] Task A', '- [ ] Task D']
                }
            ];
            const newerChecked = new Set(['Task B']);
            const result = processTasksWithOverrides(fileContents, newerChecked, false);
            expect(result.tasksByDate['2023-01-01']).toContain('- [ ] Task A');
            expect(result.tasksByDate['2023-01-01']).toContain('- [ ] Task C');
            expect(result.tasksByDate['2023-01-02']).toContain('- [ ] Task A');
            expect(result.tasksByDate['2023-01-02']).toContain('- [ ] Task D');
        });
        it('should suppress tasks overridden by newer checked tasks', () => {
            const fileContents = [
                {
                    fileName: '2023-01-01',
                    lines: ['- [ ] Task A', '- [ ] Task B']
                }
            ];
            const newerChecked = new Set(['Task A']);
            const result = processTasksWithOverrides(fileContents, newerChecked, false);
            expect(result.allTasks).toHaveLength(1);
            expect(result.allTasks).toContain('- [ ] Task B');
            expect(result.allTasks).not.toContain('- [ ] Task A');
        });
    });
    describe('createTaskOwnershipMap', () => {
        it('should assign tasks to their most recent dates', () => {
            const tasksByDate = {
                '2023-01-01': ['- [ ] Task A', '- [ ] Task B'],
                '2023-01-02': ['- [ ] Task A', '- [ ] Task C']
            };
            const ownership = createTaskOwnershipMap(tasksByDate);
            expect(ownership.get('Task A')).toBe('2023-01-02');
            expect(ownership.get('Task B')).toBe('2023-01-01');
            expect(ownership.get('Task C')).toBe('2023-01-02');
        });
        it('should handle single date with multiple tasks', () => {
            const tasksByDate = {
                '2023-01-01': ['- [ ] Task A', '- [ ] Task B']
            };
            const ownership = createTaskOwnershipMap(tasksByDate);
            expect(ownership.get('Task A')).toBe('2023-01-01');
            expect(ownership.get('Task B')).toBe('2023-01-01');
        });
    });
    describe('buildFinalTasksByDate', () => {
        it('should build final tasks respecting ownership', () => {
            const tasksByDate = {
                '2023-01-01': ['- [ ] Task A', '- [ ] Task B'],
                '2023-01-02': ['- [ ] Task A', '- [ ] Task C']
            };
            const taskOwnership = new Map([
                ['Task A', '2023-01-02'],
                ['Task B', '2023-01-01'],
                ['Task C', '2023-01-02']
            ]);
            const result = buildFinalTasksByDate(tasksByDate, taskOwnership, false);
            expect(result.finalTasksByDate['2023-01-01']).toContain('- [ ] Task B');
            expect(result.finalTasksByDate['2023-01-02']).toContain('- [ ] Task A');
            expect(result.finalTasksByDate['2023-01-02']).toContain('- [ ] Task C');
            expect(result.finalTasksByDate['2023-01-01']).not.toContain('- [ ] Task A');
        });
        it('should sort tasks when requested', () => {
            const tasksByDate = {
                '2023-01-01': ['- [ ] Zebra task', '- [ ] Apple task']
            };
            const taskOwnership = new Map([
                ['Zebra task', '2023-01-01'],
                ['Apple task', '2023-01-01']
            ]);
            const result = buildFinalTasksByDate(tasksByDate, taskOwnership, true);
            expect(result.finalTasksByDate['2023-01-01'][0]).toBe('- [ ] Apple task');
            expect(result.finalTasksByDate['2023-01-01'][1]).toBe('- [ ] Zebra task');
        });
    });
    describe('buildNonGroupedTasks', () => {
        it('should deduplicate tasks', () => {
            const allTasks = ['- [ ] Task A', '- [ ] Task B', '- [ ] Task A'];
            const result = buildNonGroupedTasks(allTasks, false);
            expect(result).toHaveLength(2);
            expect(result).toContain('- [ ] Task A');
            expect(result).toContain('- [ ] Task B');
        });
        it('should sort tasks when requested', () => {
            const allTasks = ['- [ ] Zebra task', '- [ ] Apple task'];
            const result = buildNonGroupedTasks(allTasks, true);
            expect(result[0]).toBe('- [ ] Apple task');
            expect(result[1]).toBe('- [ ] Zebra task');
        });
        it('should handle empty task list', () => {
            const result = buildNonGroupedTasks([], false);
            expect(result).toHaveLength(0);
        });
    });
    describe('generateOutput', () => {
        it('should generate grouped output with date headings', () => {
            const finalTasksByDate = {
                '2023-01-01': ['- [ ] Task B'],
                '2023-01-02': ['- [ ] Task A', '- [ ] Task C']
            };
            const allFinalTasks = ['- [ ] Task B', '- [ ] Task A', '- [ ] Task C'];
            const output = generateOutput(finalTasksByDate, allFinalTasks, false);
            expect(output).toContain('### Unchecked Tasks');
            expect(output).toContain('#### 2023-01-01');
            expect(output).toContain('#### 2023-01-02');
            expect(output).toContain('- [ ] Task A');
            expect(output).toContain('- [ ] Task B');
            expect(output).toContain('- [ ] Task C');
        });
        it('should generate reverse chronological output', () => {
            const finalTasksByDate = {
                '2023-01-01': ['- [ ] Task B'],
                '2023-01-02': ['- [ ] Task A']
            };
            const allFinalTasks = ['- [ ] Task B', '- [ ] Task A'];
            const output = generateOutput(finalTasksByDate, allFinalTasks, true);
            const pos2023_01_02 = output.indexOf('#### 2023-01-02');
            const pos2023_01_01 = output.indexOf('#### 2023-01-01');
            expect(pos2023_01_02).toBeLessThan(pos2023_01_01);
        });
        it('should handle empty tasks', () => {
            const output = generateOutput({}, [], false);
            expect(output).toBe('### Unchecked Tasks\n\n');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,